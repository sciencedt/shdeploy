{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS Step Functions Example",
  "Resources": {
    "StateMachineOnboardingInstall": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Sub": "{\n  \"Comment\": \"AWS Step Functions Example\",\n  \"StartAt\": \"SendMessage1\",\n  \"Version\": \"1.0\",\n  \"States\": {\n    \"SendMessage1\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${FunctionSendMessage.Arn}\",\n      \"Retry\": [{\n        \"ErrorEquals\": [\"States.TaskFailed\"],\n        \"IntervalSeconds\": 2,\n        \"MaxAttempts\": 16,\n        \"BackoffRate\": 2\n      }],\n      \"Next\": \"Wait1\"\n    },\n    \"Wait1\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 3,\n      \"Next\": \"FetchActivityCount1\"\n    },\n    \"FetchActivityCount1\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${FunctionFetchActivityCount.Arn}\",\n      \"Retry\": [{\n        \"ErrorEquals\": [\"States.TaskFailed\"],\n        \"IntervalSeconds\": 2,\n        \"MaxAttempts\": 16,\n        \"BackoffRate\": 2\n      }],\n      \"Next\": \"CheckActivityCount1\"\n    },\n    \"CheckActivityCount1\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [{\n        \"Variable\": \"$.activities\",\n        \"NumericEquals\": 0,\n        \"Next\": \"SendMessage2\"\n      }],\n      \"Default\": \"Done\"\n    },\n    \"SendMessage2\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${FunctionSendMessage.Arn}\",\n      \"Retry\": [{\n        \"ErrorEquals\": [\"States.TaskFailed\"],\n        \"IntervalSeconds\": 2,\n        \"MaxAttempts\": 16,\n        \"BackoffRate\": 2\n      }],\n      \"Next\": \"Wait2\"\n    },\n    \"Wait2\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 3,\n      \"Next\": \"FetchActivityCount2\"\n    },\n    \"FetchActivityCount2\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${FunctionFetchActivityCount.Arn}\",\n      \"Retry\": [{\n        \"ErrorEquals\": [\"States.TaskFailed\"],\n        \"IntervalSeconds\": 2,\n        \"MaxAttempts\": 16,\n        \"BackoffRate\": 2\n      }],\n      \"Next\": \"CheckActivityCount2\"\n    },\n    \"CheckActivityCount2\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [{\n        \"Variable\": \"$.activities\",\n        \"NumericEquals\": 0,\n        \"Next\": \"SendMessage3\"\n      }],\n      \"Default\": \"Done\"\n    },\n    \"SendMessage3\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${FunctionSendMessage.Arn}\",\n      \"Retry\": [{\n        \"ErrorEquals\": [\"States.TaskFailed\"],\n        \"IntervalSeconds\": 2,\n        \"MaxAttempts\": 16,\n        \"BackoffRate\": 2\n      }],\n      \"Next\": \"Done\"\n    },\n    \"Done\": {\n      \"Type\": \"Succeed\"\n    }\n  }\n}\n"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "RoleOnboardingInstall",
            "Arn"
          ]
        }
      }
    },
    "FunctionSendMessage": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "'use strict'\nmodule.exports.handler = (event, context, cb) => {\n  console.log(JSON.stringify(event));\n  if (Math.random() < 0.3) { // fail 30% of the time\n    cb(new Error('error happened'));\n  } else {\n    cb(null, {});\n  }\n};\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "RoleSendMessage",
            "Arn"
          ]
        },
        "Runtime": "nodejs16.x"
      }
    },
    "FunctionFetchActivityCount": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "'use strict'\nmodule.exports.handler = (event, context, cb) => {\n  console.log(JSON.stringify(event));\n  if (Math.random() < 0.3) {\n    cb(new Error('error happened')); // fail 30% of the time\n  } else {\n    cb(null, {activities: Date.now() % 2}); // return zero 50% of the time\n  }\n};\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "RoleFetchActivityCount",
            "Arn"
          ]
        },
        "Runtime": "nodejs16.x"
      }
    },
    "RoleOnboardingInstall": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "lambda",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "lambda:InvokeFunction",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "FunctionSendMessage",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "FunctionFetchActivityCount",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "RoleSendMessage": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "RoleFetchActivityCount": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    }
  }
}